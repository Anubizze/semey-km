#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from app import app, db, Product, Equipment, Material, User
from werkzeug.security import generate_password_hash
from datetime import datetime

def init_all_data():
    with app.app_context():
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        db.create_all()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
        if Product.query.count() == 0:
            products_data = [
                {"name": "–ë–ª–æ–∫ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π D400", "product_code": "GB-D400-200", "description": "–ì–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π –±–ª–æ–∫ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é D400, —Ä–∞–∑–º–µ—Ä 200–º–º"},
                {"name": "–ë–ª–æ–∫ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π D500", "product_code": "GB-D500-200", "description": "–ì–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π –±–ª–æ–∫ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é D500, —Ä–∞–∑–º–µ—Ä 200–º–º"},
                {"name": "–ë–ª–æ–∫ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π D600", "product_code": "GB-D600-200", "description": "–ì–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π –±–ª–æ–∫ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é D600, —Ä–∞–∑–º–µ—Ä 200–º–º"},
                {"name": "–ë–ª–æ–∫ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π D400-300", "product_code": "GB-D400-300", "description": "–ì–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π –±–ª–æ–∫ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é D400, —Ä–∞–∑–º–µ—Ä 300–º–º"},
                {"name": "–ë–ª–æ–∫ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π D500-300", "product_code": "GB-D500-300", "description": "–ì–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π –±–ª–æ–∫ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é D500, —Ä–∞–∑–º–µ—Ä 300–º–º"},
                {"name": "–ü–µ—Ä–µ–º—ã—á–∫–∞ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω–∞—è", "product_code": "GB-LINTEL", "description": "–ü–µ—Ä–µ–º—ã—á–∫–∞ –∏–∑ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–∞"},
                {"name": "U-–±–ª–æ–∫ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π", "product_code": "GB-U-BLOCK", "description": "U-–æ–±—Ä–∞–∑–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∞—Ä–º–æ–ø–æ—è—Å–æ–≤"}
            ]
            
            for prod_data in products_data:
                product = Product(**prod_data)
                db.session.add(product)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(products_data)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        else:
            print(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {Product.query.count()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        if Equipment.query.count() == 0:
            equipment_data = [
                {"name": "–§–æ—Ä–º–∞ –∑–∞–ª–∏–≤–∫–∏ ‚Ññ1", "equipment_type": "casting", "status": "operational"},
                {"name": "–§–æ—Ä–º–∞ –∑–∞–ª–∏–≤–∫–∏ ‚Ññ2", "equipment_type": "casting", "status": "operational"},
                {"name": "–§–æ—Ä–º–∞ –∑–∞–ª–∏–≤–∫–∏ ‚Ññ3", "equipment_type": "casting", "status": "operational"},
                {"name": "–°—Ç–∞–Ω–æ–∫ —Ä–µ–∑–∫–∏ ‚Ññ1", "equipment_type": "cutting", "status": "operational"},
                {"name": "–°—Ç–∞–Ω–æ–∫ —Ä–µ–∑–∫–∏ ‚Ññ2", "equipment_type": "cutting", "status": "operational"},
                {"name": "–ê–≤—Ç–æ–∫–ª–∞–≤ ‚Ññ1", "equipment_type": "autoclave", "status": "operational"},
                {"name": "–ê–≤—Ç–æ–∫–ª–∞–≤ ‚Ññ2", "equipment_type": "autoclave", "status": "operational"},
                {"name": "–ê–≤—Ç–æ–∫–ª–∞–≤ ‚Ññ3", "equipment_type": "autoclave", "status": "operational"}
            ]
            
            for eq_data in equipment_data:
                equipment = Equipment(**eq_data)
                db.session.add(equipment)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(equipment_data)} –µ–¥–∏–Ω–∏—Ü –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
        else:
            print(f"‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {Equipment.query.count()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        if Material.query.count() == 0:
            materials_data = [
                {"name": "–¶–µ–º–µ–Ω—Ç", "unit": "kg"},
                {"name": "–ò–∑–≤–µ—Å—Ç—å", "unit": "kg"},
                {"name": "–ê–ª—é–º–∏–Ω–∏–µ–≤–∞—è –ø—É–¥—Ä–∞", "unit": "kg"},
                {"name": "–®–ª–∞–º", "unit": "l"},
                {"name": "–ì–∏–ø—Å", "unit": "kg"},
                {"name": "–í–æ–¥–∞", "unit": "l"},
                {"name": "–°—É–ª—å—Ñ–∞–Ω–æ–ª", "unit": "l"},
                {"name": "–ü–µ—Å–æ–∫", "unit": "kg"},
                {"name": "–ó–æ–ª–∞", "unit": "kg"}
            ]
            
            for mat_data in materials_data:
                material = Material(**mat_data)
                db.session.add(material)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(materials_data)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        else:
            print(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {Material.query.count()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if User.query.count() == 0:
            users_data = [
                {"fio": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "iin": "000000000000", "username": "admin", "password": "admin", "role": "admin", "position": "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"},
                {"fio": "–î–∏—Ä–µ–∫—Ç–æ—Ä –ò–≤–∞–Ω–æ–≤ –ò.–ò.", "iin": "111111111111", "username": "director", "password": "director123", "role": "director", "position": "–î–∏—Ä–µ–∫—Ç–æ—Ä"},
                {"fio": "–ì–ª–∞–≤–Ω—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥ –ü–µ—Ç—Ä–æ–≤ –ü.–ü.", "iin": "222222222222", "username": "chief_tech", "password": "tech123", "role": "chief_technologist", "position": "–ì–ª–∞–≤–Ω—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥"},
                {"fio": "–û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∑–∫–∏ –°–∏–¥–æ—Ä–æ–≤ –°.–°.", "iin": "333333333333", "username": "cutting_op", "password": "cutting123", "role": "cutting_operator", "position": "–û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∑–∫–∏"},
                {"fio": "–û–ø–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–∫–ª–∞–≤–∞ –ö–æ–∑–ª–æ–≤ –ö.–ö.", "iin": "444444444444", "username": "autoclave_op", "password": "autoclave123", "role": "autoclave_operator", "position": "–û–ø–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–∫–ª–∞–≤–∞"},
                {"fio": "–ó–∞–ª–∏–≤—â–∏–∫ –ú–æ—Ä–æ–∑–æ–≤ –ú.–ú.", "iin": "555555555555", "username": "casting_op", "password": "casting123", "role": "casting_operator", "position": "–ó–∞–ª–∏–≤—â–∏–∫"},
                {"fio": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ù–æ–≤–∏–∫–æ–≤ –ù.–ù.", "iin": "666666666666", "username": "employee", "password": "employee123", "role": "employee", "position": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"}
            ]
            
            for user_data in users_data:
                # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                user_data["password"] = generate_password_hash(user_data["password"])
                user = User(**user_data)
                db.session.add(user)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {User.query.count()}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        
        print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("=" * 50)
        print("üìã –°–≤–æ–¥–∫–∞:")
        print(f"  üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã: {Product.query.count()}")
        print(f"  üîß –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {Equipment.query.count()}")
        print(f"  üß± –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {Material.query.count()}")
        print(f"  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {User.query.count()}")
        
        print("\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
        print("  admin / admin")
        print("  director / director123")
        print("  chief_tech / tech123")
        print("  cutting_op / cutting123")
        print("  autoclave_op / autoclave123")
        print("  casting_op / casting123")
        print("  employee / employee123")

if __name__ == "__main__":
    init_all_data()
